@page "/jobcandidate"
@using Blazorise
@using Blazorise.DataGrid
@using Display1.Data.CustomProvider;
@using Display1.Models
@using Display1.Service
@using System.Xml.Linq
@inject JobCandidateService jobCandidateService
@inject NavigationManager navigationManager
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity;
@inject UserManager<ApplicationUser> userManager
@inject IHttpContextAccessor httpContext
@inject IRoleStore<ApplicationRole> roleStore

<PageTitle>Job Candidates</PageTitle>
@if (jobcandidate == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DataGrid TItem="Display1.Models.JobCandidate" Data="@jobcandidate" Sortable="true" Editable="true" ShowPager="true">
        <DataGridCommandColumn TItem="Display1.Models.JobCandidate" Caption="Actions" Width="150px">
            <NewCommandTemplate>
                <Button Color="Color.Success" Clicked="@context.Clicked">New</Button>
            </NewCommandTemplate>
            <EditCommandTemplate>
                <Button Color="Color.Primary" Clicked="@context.Clicked">Edit</Button>
            </EditCommandTemplate>
        </DataGridCommandColumn>

        <DataGridColumn TItem="Display1.Models.JobCandidate" Field="@nameof(Display1.Models.JobCandidate.JobCandidateId)" Caption="Job Candidate ID"></DataGridColumn>

        <DataGridColumn TItem="Display1.Models.JobCandidate" Field="" Caption="First Name">
            <DisplayTemplate>
                @{
                    var xml = XDocument.Parse(context.Resume);
                    var firstName = xml.Root?.Element("{http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume}Name")?.Element("{http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume}Name.First")?.Value;
                    if (!string.IsNullOrEmpty(firstName))
                    {
                        <span>@firstName</span>
                    }
                }
            </DisplayTemplate>
        </DataGridColumn>

        <DataGridColumn TItem="Display1.Models.JobCandidate" Field="" Caption="Last Name">
            <DisplayTemplate>
                @{
                    var xml = XDocument.Parse(context.Resume);
                    var lastName = xml.Root?.Element("{http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume}Name")?.Element("{http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume}Name.Last")?.Value;
                    if (!string.IsNullOrEmpty(lastName))
                    {
                        <span>@lastName</span>
                    }
                }
            </DisplayTemplate>
        </DataGridColumn>

        <DataGridColumn TItem="Display1.Models.JobCandidate" Field="@nameof(Display1.Models.JobCandidate.BusinessEntityId)" Caption="Business Entity ID"></DataGridColumn>

        <DataGridColumn TItem="Display1.Models.JobCandidate" Field="@nameof(Display1.Models.JobCandidate.Resume)" Caption="Resume">
            <DisplayTemplate>
                @if (!string.IsNullOrEmpty(context.Resume))
                {
                    <a href="javascript:void(0);" @onclick="() => ShowResume(context.JobCandidateId, context.Resume)">View Resume</a>
                }
            </DisplayTemplate>
        </DataGridColumn>

        <DataGridColumn TItem="Display1.Models.JobCandidate" Field="@nameof(Display1.Models.JobCandidate.ModifiedDate)" Caption="Modified Date"></DataGridColumn>
    </DataGrid>
}

@code {
    private IEnumerable<Display1.Models.JobCandidate> jobcandidate = new List<Display1.Models.JobCandidate>();

    private IList<string> userRoles;

    [Inject]
    public CustomRoleManager CustomRoleManager { get; set; }

    [Authorize(Roles = "Admin")]


    protected override async Task OnInitializedAsync()
    {
        await LoadJobCandidates();

        var user = httpContext.HttpContext?.User;

        if (user != null && user.Identity?.IsAuthenticated == true)
        {
            var userId = userManager.GetUserId(user);
            var applicationUser = await userManager.FindByIdAsync(userId);

            if (applicationUser != null)
            {
                var isAdmin = CustomRoleManager.AdminEmails.Contains(applicationUser.Email);

                if (!isAdmin)
                {

                    NavigationManager.NavigateTo("/accessdenied");
                }
            }
        }
        else
        {

            NavigationManager.NavigateTo("/login");
        }
    }




    private async Task LoadJobCandidates()
    {
        jobcandidate = await jobCandidateService.GetJobCandidateAsync();
    }

    private void ShowResume(int jobCandidateId, string resumeXml)
    {
        var encodedResumeXml = Uri.EscapeDataString(resumeXml);
        navigationManager.NavigateTo($"/resume/{jobCandidateId}?xml={encodedResumeXml}");
    }

    private async Task NewClicked(Display1.Models.JobCandidate context)
    {
        var newJobCandidate = new Display1.Models.JobCandidate();
        newJobCandidate.ModifiedDate = DateTime.Now;
        await jobCandidateService.CreateJobCandidateAsync(newJobCandidate);
        await LoadJobCandidates();
    }

    private void EditClicked(Display1.Models.JobCandidate context)
    {

    }

}
