@using Display1.Models

@using Display1.Service
@using Display1.Data.CustomProvider
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject EmployeeService EmployeeService
@inject NavigationManager NavigationManager



<div class="row">

    <div class="col-12">

        <ul class="list-group">

            <li class="list-group-item" style="list-style-type: none;">

                <strong>Person Type:</strong>
                <span>@(SelectedPerson?.PersonType)</span>
            </li>

            <li class="list-group-item" style="list-style-type: none;">

                <strong>Name Style:</strong>
                <span>@(SelectedPerson?.NameStyle)</span>
            </li>

            <li class="list-group-item" style="list-style-type: none;">

                <strong>Title:</strong>
                <span>@(SelectedPerson?.Title)</span>
            </li>
            
            @*Editing First Name*@

            <li class="list-group-item" style="list-style-type: none;">

                @if (IsEditing)
                {
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>First Name:</strong>
                    <input type="text" bind="SelectedPerson.FirstName" class="form-control" />
                </li>
                }
                else
                {
                <li class="list-group-item" style="list-style-type: none;">
                <strong>First Name:</strong>
                    <span>@(SelectedPerson?.FirstName)</span>
                </li>
                }
            </li>


            @*Editing Middle Name*@

            <li class="list-group-item" style="list-style-type: none;">

                @if (IsEditing)
                {
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>Middle Name:</strong>
                    <input type="text" bind="SelectedPerson.MiddleName" class="form-control" />
                </li>
                }
                else
                {
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>Middle Name:</strong>
                    <span>@(SelectedPerson?.MiddleName)</span>
                </li>
                }
            </li>

            @*Editing Last Name*@
            <li class="list-group-item" style="list-style-type: none;">

                @if (IsEditing)
                {
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>Last Name:</strong>
                    <input type="text" bind="SelectedPerson.LastName" class="form-control" />
                </li>
                }
                else
                {
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>Last Name:</strong>
                    <span>@(SelectedPerson?.LastName)</span>
                </li>
                }
            </li>

            <li class="list-group-item" style="list-style-type: none;">
                <strong>Suffix:</strong>
                <span>@(SelectedPerson?.Suffix)</span>
            </li>

            <li class="list-group-item" style="list-style-type: none;">

                <strong>Email Promotion:</strong>
                <span>
                    @(SelectedPerson?.EmailPromotion)</span>
            </li>

            @*Editing Additional Contact Info*@

            <li class="list-group-item" style="list-style-type: none;">

                @if (IsEditing)
                {
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>Additional Contact Info:</strong>
                    <input type="text" bind="SelectedPerson.AdditionalContactInfo" class="form-control" />
                </li>
                }
                else
                {
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>Additional Contact Info:</strong>
                    <span>@(SelectedPerson?.AdditionalContactInfo)</span>
                </li>
                }
            </li>


            <li class="list-group-item" style="list-style-type: none;">

                <strong>Demographics:</strong>

                @if (!string.IsNullOrEmpty(SelectedPerson?.Demographics))

                {

                    <span>

                        <a href="javascript:void(0)" @onclick="OpenDemographicsXml" class="xml-link">Demographics</a>

                    </span>

                }

                else

                {

                    <span>No XML available</span>

                }

            </li>

            <li class="list-group-item" style="list-style-type: none;">

                <strong>rowguid:</strong>
                <span>@(SelectedPerson?.Rowguid)</span>
            </li>

            <li class="list-group-item" style="list-style-type: none;">

                <strong>Modified Date:</strong>
                <span>@(SelectedPerson?.ModifiedDate)</span>
            </li>

        </ul>
@*
       <button class="btn btn-primary" @onclick="EnableEditMode">Edit</button>*@

        <div class="mt-3">

            @if (IsEditing)

            {
                
                <button class="btn btn-primary" @onclick="SaveChanges">Save Changes</button>

                <button class="btn btn-secondary ml-2" @onclick="CancelEdit">Cancel</button>

            }

            else

            {

                <button class="btn btn-primary" @onclick="StartEdit">Edit</button>

            }

        </div>

    </div>

</div>



@code {

    [Parameter]

    public Person SelectedPerson { get; set; }

    private bool IsEditing = false;
    private Person originalPerson;

    //changed businessEntity to Person

    protected async override Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        string email = user.FindFirstValue(ClaimTypes.Email);

        int businessEntityId = await EmployeeService.FindBusinessEntityIdByEmailAsync(email);

        if (businessEntityId != 0)
        {
            SelectedPerson = EmployeeService.GetPersonByBusinessEntityId(businessEntityId);
        }
    }



    private void StartEdit()

    {
        IsEditing = true;
    }



    private async Task SaveChanges()
    {
        // Update the changes in the database
        await EmployeeService.UpdatePersonDetailsAsync(SelectedPerson);
        IsEditing = false;
    }

    private async Task CancelEdit()

    {
        await EmployeeService.UpdatePersonDetailsAsync(SelectedPerson);
        IsEditing = false;
    }



    private void OpenDemographicsXml()

    {
        string xmlContent = SelectedPerson?.Demographics;
        NavigationManager.NavigateTo($"/demographicsxmlviewer?XmlContent={Uri.EscapeDataString(xmlContent)}");
    }
}
