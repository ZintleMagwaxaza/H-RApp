@using Display1.Models

@using Display1.Service
@using Display1.Data.CustomProvider
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject EmployeeService EmployeeService
@inject NavigationManager NavigationManager



<div class="row">

    <div class="col-12">

        <ul class="list-group">

            <li class="list-group-item" style="list-style-type: none;">

                <strong>Person Type:</strong>
                <span>@(SelectedEmployee?.Person.PersonType)</span>
            </li>

            <li class="list-group-item" style="list-style-type: none;">

                <strong>Name Style:</strong>
                <span>@(SelectedEmployee?.Person.NameStyle)</span>
            </li>

            <li class="list-group-item" style="list-style-type: none;">

                <strong>Title:</strong>
                <span>@(SelectedEmployee?.Person.Title)</span>
            </li>

            <li class="list-group-item" style="list-style-type: none;">

                <strong>First Name:</strong>
                <span>@(SelectedEmployee?.Person.FirstName)</span>
            </li>

            <li class="list-group-item" style="list-style-type: none;">

                <strong>Middle Name:</strong>
                <span>@(SelectedEmployee?.Person.MiddleName)</span>
            </li>

            <li class="list-group-item" style="list-style-type: none;">

                <strong>Last Name:</strong>
                <span>@(SelectedEmployee?.Person.LastName)</span>
            </li>

            <li class="list-group-item" style="list-style-type: none;">

                <strong>Suffix:</strong>
                <span>@(SelectedEmployee?.Person
                    .Suffix)</span>
            </li>

            <li class="list-group-item" style="list-style-type: none;">

                <strong>Email Promotion:</strong>
                <span>
                    @(SelectedEmployee?.Person
                    .EmailPromotion)</span>
            </li>

            <li class="list-group-item" style="list-style-type: none;">

                <strong>Additional Contact Info:</strong>
                <span>@(SelectedEmployee?.Person.AdditionalContactInfo)</span>
            </li>

            <li class="list-group-item" style="list-style-type: none;">

                <strong>Demographics:</strong>

                @if (!string.IsNullOrEmpty(SelectedEmployee?.Person?.Demographics))

                {

                    <span>

                        <a href="javascript:void(0)" @onclick="OpenDemographicsXml" class="xml-link">Demographics</a>

                    </span>

                }

                else

                {

                    <span>No XML available</span>

                }

            </li>

            <li class="list-group-item" style="list-style-type: none;">

                <strong>rowguid:</strong>
                <span>@(SelectedEmployee?.Rowguid)</span>
            </li>

            <li class="list-group-item" style="list-style-type: none;">

                <strong>Modified Date:</strong>
                <span>@(SelectedEmployee?.ModifiedDate)</span>
            </li>

        </ul>
@*
       <button class="btn btn-primary" @onclick="EnableEditMode">Edit</button>*@

        <div class="mt-3">

            @if (IsEditing)

            {

                <button class="btn btn-primary" @onclick="SaveChanges">Save Changes</button>

                <button class="btn btn-secondary ml-2" @onclick="CancelEdit">Cancel</button>

            }

            else

            {

                <button class="btn btn-primary" @onclick="StartEdit">Edit</button>

            }

        </div>

    </div>

</div>



@code {

    [Parameter]

    public Employee SelectedEmployee { get; set; }



    private bool IsEditing = false;

    private Employee originalEmployee;

    //changed businessEntity to Person

    protected async override Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        string email = user.FindFirstValue(ClaimTypes.Email);

        int businessEntityId = await EmployeeService.FindBusinessEntityIdByEmailAsync(email);

        if (businessEntityId != 0)
        {
            SelectedEmployee = EmployeeService.GetEmployeeByBusinessEntityId(businessEntityId);
        }
    }



    private void StartEdit()

    {

        IsEditing = true;

    }



    private async void SaveChanges()
    {
        // Update the changes in the database
        await EmployeeService.UpdatePersonDetailsAsync(SelectedEmployee.Person);



        IsEditing = false;
        originalEmployee = SelectedEmployee.Clone();
    }



    private void CancelEdit()

    {

        SelectedEmployee = originalEmployee;

        IsEditing = false;

    }



    private void OpenDemographicsXml()

    {

        string xmlContent = SelectedEmployee?.Person?.Demographics;
        NavigationManager.NavigateTo($"/demographicsxmlviewer?XmlContent={Uri.EscapeDataString(xmlContent)}");

    }
}
