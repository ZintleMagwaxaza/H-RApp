@page "/resume/{id:int}"
@using System.Xml.Linq
@using Display1.Service
@inject JobCandidateService jobCandidateService

<h3>Resume</h3>

@if (Xml == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="resume-container">
        @RenderResumeElements(resumeElements)
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private string? Xml;
    private XDocument? resumeDocument;
    private IEnumerable<XElement>? resumeElements;

    protected override async Task OnInitializedAsync()
    {
        await LoadResume();
    }

    private async Task LoadResume()
    {
        var jobCandidate = await jobCandidateService.GetJobCandidateAsync(Id);
        if (jobCandidate != null)
        {
            Xml = jobCandidate.Resume;

            if (Xml != null)
            {
                string unescapedXml = Uri.UnescapeDataString(Xml);
                resumeDocument = XDocument.Parse(unescapedXml);
                resumeElements = resumeDocument.Root?.Elements();
            }
        }
    }


    private RenderFragment RenderResumeElements(IEnumerable<XElement>? elements)
    {
        var elementMapping = new Dictionary<string, string>
        {
        { "Name.First", "First Name: " },
        { "Name.Middle", "MIddle Name: " },
        { "Name.Last", "Last Name: " },
        { "Skills", "Skills: " },
        { "Employment", "Employment History" },

        { "Emp.StartDate", "Start Date: " },
        { "Emp.EndDate", "End Date: " },
        { "Emp.OrgName", "Organisation: " },
        { "Emp.JobTitle", "Job Title: " },
        { "Emp.Responsibility", "Responsibility: " },
        { "Emp.FunctionCategory", "Function Category: " },
        { "Emp.IndustryCategory", "Industry Category: " },

        { "Loc.State", "State: " },
        { "Loc.City", "City: " },

         { "Education", "Education" },
        { "Edu.Level", "Level: " },
        { "Edu.StartDate", "StartDate: " },
        { "Edu.EndDate", "EndDate: " },
        { "Edu.Degree", "Degree: " },
        { "Edu.Major", "Major: " },
        { "Edu.Minor", "Minor: " },
        { "Edu.GPA", "GPA: " },
        { "Edu.GPAScale", "GPAScale: " },
        { "Edu.School", "School: " },
        

        { "Location", "Location " },
        { "Loc.CountryRegion", "Country: " },

        { "Address", "Address Details " },
        { "Addr.Type", "Type: " },
        { "Addr.Street", "Street: " },
        { "Addr.Location", "Location: " },
        { "Addr.PostalCode", "PostalCode: " },


        { "Telephone", "Telephone Details " },
        { "Tel.Type", "Type: " },
        { "Tel.IntlCode", "IntlCode: " },
        { "Tel.AreaCode", "AreaCode: " },
        { "Tel.Number", "Number: " },

        { "EMail", "Email Address: " },

        };

        return builder =>
        {
            if (elements != null)
            {
                foreach (var element in elements)
                {
                    var elementName = element.Name.LocalName;
                    var elementValue = element.Value;

                    if (elementMapping.TryGetValue(elementName, out var mappedName))
                    {
                        if (elementName.StartsWith("Employment") || elementName.StartsWith("Addr.Telephone") || elementName.StartsWith("Telephone") || elementName.StartsWith("Location") || elementName.StartsWith("Education") || elementName.StartsWith("Address"))
                        {
                            builder.OpenElement(0, "div");
                            builder.AddAttribute(1, "class", "list-group-item");

                            builder.OpenElement(2, "h5");
                            builder.AddAttribute(3, "class", "resume-heading");
                            builder.AddContent(4, mappedName);
                            builder.CloseElement();

                            builder.OpenElement(2, "ul");
                            builder.CloseElement(); 
                            builder.CloseElement(); 
                        }
                        else
                        {
                            builder.OpenElement(0, "div");
                            builder.AddAttribute(1, "class", "list-group-item");

                            builder.OpenElement(2, "li");
                            builder.AddContent(3, mappedName);
                            builder.OpenElement(4, "span");
                            builder.AddContent(5, elementValue);
                            builder.CloseElement();
                            builder.CloseElement(); 

                            builder.CloseElement(); 
                        }
                    }

                    if (element.HasElements)
                    {
                        builder.AddContent(0, RenderResumeElements(element.Elements()));
                    }
                }
            }
        };
    }
}
