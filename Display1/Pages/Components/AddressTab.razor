@using Display1.Models
@using Display1.Service
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject EmployeeService EmployeeService
@inject NavigationManager NavigationManager

@if (address != null)
{
    <div class="row">
        <div class="col-12">
            <ul class="list-group">
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>AddressID:</strong>
                    <span>@address.AddressId</span>
                </li>

                @*Editing Address Line 1*@
                @if (IsEditing)
                {
                  <li class="list-group-item" style="list-style-type: none;">
                     <strong>Address Line 1:</strong>
                     <input type="text"@bind="address.AddressLine1" class="form-control"/>
                  </li>
                }
                else
                {
                 <li class="list-group-item" style="list-style-type: none;">
                    <strong>Address Line 1:</strong>
                    <span>@address.AddressLine1</span>
                 </li>
                }

                @*Editing Address Line 2*@
                @if (IsEditing)
                {
                    <li class="list-group-item" style="list-style-type: none;">
                        <strong>Address Line 2:</strong>
                        <input type="text" @bind="address.AddressLine2" class="form-control" />
                    </li>
                }
                else
                {
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>Address Line 2:</strong>
                    <span>@address.AddressLine2</span>
                </li>
                }

                @*Editing City*@
                @if (IsEditing)
                {
                    <li class="list-group-item" style="list-style-type: none;">
                        <strong>City:</strong>
                        <input type="text" @bind="address.City" class="form-control" />
                    </li>
                }
                else
                {
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>City:</strong>
                    <span>@address.City</span>
                </li>
                }


                <li class="list-group-item" style="list-style-type: none;">
                    <strong>State Province ID:</strong>
                    <span>@address.StateProvinceId</span>
                </li>

                @*Editing Postal Code*@
                @if (IsEditing)
                {
                    <li class="list-group-item" style="list-style-type: none;">
                        <strong>PostalCode:</strong>
                        <input type="text" @bind="address.PostalCode" class="form-control" />
                    </li>
                }
                else
                {
                    <li class="list-group-item" style="list-style-type: none;">
                        <strong>PostalCode:</strong>
                        <span>@address.PostalCode</span>
                    </li>
                }
                

                
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>rowguid:</strong>
                    <span>@address.Rowguid</span>
                </li>


                <li class="list-group-item" style="list-style-type: none;">
                    <strong>ModifiedDate:</strong>
                    <span>@address.ModifiedDate</span>
                </li>
            </ul>

            <div class="mt-3">

                @if (IsEditing)

                {
                    <button class="btn btn-primary" @onclick="SaveChanges">Save Changes</button>

                    <button class="btn btn-secondary ml-2" @onclick="CancelEdit">Cancel</button>
                }

                else

                {
                    <button class="btn btn-primary" @onclick="StartEdit">Edit</button>
                }

            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-warning">No address found for the selected business entity.</div>
}

@code {
    [Parameter]
    public int BusinessEntityId { get; set; }


    private bool IsEditing = false;
    private Address originalAddress;
    private Address address;

    //Edited
    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        string email = user.FindFirstValue(ClaimTypes.Email);

        int businessEntityId = await EmployeeService.FindBusinessEntityIdByEmailAsync(email);

        if (businessEntityId != 0)
        {
            address = EmployeeService.GetAddressForBusinessEntity(businessEntityId);

            originalAddress = new Address
            {
             AddressId = address.AddressId,
             AddressLine1 = address.AddressLine1,
             AddressLine2 = address.AddressLine2,
             BusinessEntityAddress = address.BusinessEntityAddress,
             City = address.City,
             PostalCode = address.PostalCode,
             ModifiedDate = address.ModifiedDate,
             Rowguid = address.Rowguid,
             StateProvince = address.StateProvince,
             StateProvinceId = address.StateProvinceId,
            };
        }
    }

    private void StartEdit()
    {
        IsEditing = true;  
    }

    private async Task SaveChanges()
    {
        await EmployeeService.UpdatePersonAddressAsync(address);
        IsEditing = false;
    }

    private async Task CancelEdit()
    {
        await EmployeeService.UpdatePersonAddressAsync(address);
        IsEditing = false;
    }
}
