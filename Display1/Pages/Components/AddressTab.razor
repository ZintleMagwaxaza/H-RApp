@using Display1.Models
@using Display1.Service
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject EmployeeService EmployeeService
@inject NavigationManager NavigationManager

@if (address != null)
{
    <div class="row">
        <div class="col-12">
            <ul class="list-group">
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>AddressID:</strong>
                    <span>@address.AddressId</span>
                </li>
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>Address Line 1:</strong>
                    <span>@address.AddressLine1</span>
                </li>
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>Address Line 2:</strong>
                    <span>@address.AddressLine2</span>
                </li>
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>City:</strong>
                    <span>@address.City</span>
                </li>
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>State Province ID:</strong>
                    <span>@address.StateProvinceId</span>
                </li>
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>PostalCode:</strong>
                    <span>@address.PostalCode</span>
                </li>
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>rowguid:</strong>
                    <span>@address.Rowguid</span>
                </li>
                <li class="list-group-item" style="list-style-type: none;">
                    <strong>ModifiedDate:</strong>
                    <span>@address.ModifiedDate</span>
                </li>
            </ul>
        </div>
    </div>
}
else
{
    <div class="alert alert-warning">No address found for the selected business entity.</div>
}

@code {
    [Parameter]
    public int BusinessEntityId { get; set; }

    private Address address;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        string email = user.FindFirstValue(ClaimTypes.Email);

        int businessEntityId = await EmployeeService.FindBusinessEntityIdByEmailAsync(email);

        if (businessEntityId != 0)
        {
            address = EmployeeService.GetAddressForBusinessEntity(businessEntityId);
        }
    }
}
