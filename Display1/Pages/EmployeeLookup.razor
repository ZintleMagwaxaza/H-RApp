@page "/employeelookup"
@using Display1.Models
@using Microsoft.EntityFrameworkCore

<!-- Style start -->
<style>
    .scroll-pane {
        position: relative;
    }

        .scroll-pane thead th {
            position: sticky;
            top: 0;
            background-color: #ffffff;
        }
</style>
<!-- Style end -->

<PageTitle>Index</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="form-group">
                <label for="searchInput">Search:</label>
                <input id="searchInput" class="form-control" @bind="@searchInput" />
                <button class="btn btn-primary" @onclick="Search">Search</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="scroll-pane" style="height:800px; overflow: auto;">
                <table class="table">
                    <thead>
                        <tr>
                            <!--<th>Business Entity ID</th>-->
                            <th>First Name</th>
                            <th>Last Name</th>
                            <th>Email</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Loop through filtered persons and display the details -->
                        @foreach (var person in filteredPersons.Take(50))
                        {
                            <tr>
                                
                                <td>@person.FirstName</td>
                                <td>@person.LastName</td>
                                <td>@GetEmailAddress(person.BusinessEntityId)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    AdventureWorks2019Context db = new AdventureWorks2019Context();
    private List<Person> persons;
    private List<Person> filteredPersons;
    private string searchInput;

    protected override void OnInitialized()
    {
        persons = db.Person
            .Include(p => p.EmailAddress)
            .Where(p => p.Employee != null) // Filter persons who have an entry in the employee table
            .ToList();
        filteredPersons = persons;
    }

    private void ApplySearchFilter()
    {
        if (!string.IsNullOrEmpty(searchInput))
        {
            filteredPersons = persons
                .Where(p =>
                    p.FirstName.Contains(searchInput, StringComparison.OrdinalIgnoreCase) ||
                    p.LastName.Contains(searchInput, StringComparison.OrdinalIgnoreCase) ||
                    p.BusinessEntityId.ToString().Contains(searchInput, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            filteredPersons = persons;
        }
    }

    private void Search()
    {
        ApplySearchFilter();
    }

    private string GetEmailAddress(int businessEntityId)
    {
        var person = persons.FirstOrDefault(p => p.BusinessEntityId == businessEntityId);
        return person?.EmailAddress?.FirstOrDefault()?.EmailAddress1 ?? string.Empty;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ApplySearchFilter();
            StateHasChanged();
        }
    }
}
